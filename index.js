// upgrade to at least node@14 to require discord.js, if not 16
const Discord = require("discord.js");
const client = new Discord.Client();
// import database library
const Database = require("@replit/database")
// create new database
const db = new Database()
// environment variable to hide bot token, generated by discord
const mySecret = process.env['TOKEN'];
// downgrade to node-fetch@2.6.1 in order require node-fetch package
const fetch = require("node-fetch");

// words that the bot will react to
const triggers = ["sad", "depress", "disappoint", "upset"];
// phrases that the bot will respond with
const starterEncouragements = [
  "Keep your head up, King.",
  "Suffering is temporary, glory is forever.",
  "Just a reminder that you are a deserving of rest, love, and peace."
]

//initialize database
db.get("customEncouragements").then(customEncouragements => {
  if (!customEncouragements || customEncouragements.length < 1) {
    db.set("customEncouragements", starterEncouragements)
  };
});

// helper function to update customEncouragements
const updateEncouragements = encouragingMessage => {
  db.get("customEncouragements").then(customEncouragements => {
    customEncouragements.push([encouragingMessage]);
    db.set("customEncouragements", customEncouragements);
  });
};

// helper function to delete customEncouragements
const deleteEncouragements = index => {
  db.get("customEncouragements").then(customEncouragements => {
    if (customEncouragements.length > index) {
      customEncouragements.splice(index, 1);
    db.set("customEncouragements", customEncouragements)
    }
  })
}

const getQuote = () => {
  return fetch("https://zenquotes.io/api/random")
    .then(res => {
      return res.json()
    })
    .then(json => {
      return json[0].q
    })
}

client.on("ready", () => {
  console.log(`Logged in as ${client.user.tag}.`)
});
// send quote from api
client.on("message", msg => {
  if (msg.author.bot) return;
  if (msg.content === "$inspire") {
    getQuote().then(quote => msg.channel.send(quote))
  };
// notification for successful add
  if (msg.content.startsWith("$new")) {
    encouragingMessage = msg.content.split("$new ")[1];
    updateEncouragements(encouragingMessage);
    msg.channel.send("New encouragement added!")
  }
// notification for successful delete
  if (msg.content.startsWith("$del")) {
    index = parseInt(msg.content.split("$del ")[1]);
    deleteEncouragements(index);
    msg.channel.send("Encouragement has been successfully deleted");
  }
// custom response to trigger words
  if (triggers.some(word => msg.content.includes(word))) {
    db.get("customEncouragements").then(customEncouragements => {
      const customResponse = customEncouragements[Math.floor(Math.random() * customEncouragements.length)];
      msg.reply(customResponse);
    });
  };

// view list of custom responses
if (msg.content.startsWith("$list")) {
  db.get("customEncouragements").then(customEncouragements => {
    msg.channel.send(customEncouragements)
  });
};
});

client.login(mySecret);
